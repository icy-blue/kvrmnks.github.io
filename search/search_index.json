{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"\\sum_{i=1}^{\\inf}\\frac{1}{i^2}=\\frac{\\pi^2}{6}","title":"About"},{"location":"%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%A7%A3%E6%9E%90HWDB1.1%E6%95%B0%E6%8D%AE%E4%B9%8B%E8%B7%AF/","text":"\u672c\u6587\u65e8\u5728\u4e3a\u81ea\u8eab\u540e\u65e5\u56de\u5fc6~~\u5e76\u975e\u7528\u4e8e\u6559\u5b66~~ \u672c\u6587\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528jupyter lab \u7b2c\u4e00\u6b65 \u5f97\u5230\u6570\u636e\u96c6 ~~\u4e0d\u8bf4\u4e86~~ \u7b2c\u4e8c\u6b65 \u89e3\u6790\u4e00\u4e2a\u6587\u4ef6 \u5c31\u6765\u89e3\u6790\u8fd9\u4e2a\u53eb\u201c1001-c.gnt\u201d\u7684\u6587\u4ef6\u5427 \u5b98\u7f51\u4e0a\u6709\u5177\u4f53\u7684\u6587\u4ef6\u683c\u5f0f \u7b80\u5355\u6765\u8bf4\u662f\uff0c\u4e00\u4e2a\u8fd9\u6837\u7684\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u591a\u4e2a\u56fe\u7247 ~~\u76f4\u63a5\u4e0a\u4ee3\u7801\u597d\u4e86~~ import numpy as np import struct def load_raw_data(id): path = '../HWDB1.1trn_gnt/' + str(id) + '-c.gnt' file = open(path, 'rb') features = [] labels = [] while file.read(1) != '': file.seek(-1, 1) buf = file.read(4) if len(buf) != 4: break length_bytes = struct.unpack('<I', buf)[0] tag_code = file.read(2) width = struct.unpack('<H', file.read(2))[0] height = struct.unpack('<H', file.read(2))[0] content = file.read(height*width) img = np.frombuffer(content, dtype=np.uint8).reshape(height,width) features.append(img) labels.append(char_dict[tag_code.decode('gb2312')]) return np.array(features), np.array(labels) char_dict\u5c31\u4e0d\u653e\u5728\u8fd9\u91cc\u4e86\uff0c\u592a\u957f\u4e86 \u8fd9\u4e2a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c\u662f\u4e00\u4e2andarray\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u7070\u5ea6\u56fe\u7247 \u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u662flabels\u6570\u7ec4\u4ee3\u8868\u4e86\u6bcf\u4e2a\u56fe\u7247\u5206\u522b\u5c5e\u7684\u7c7b\u522b \u7136\u540e\u968f\u4fbf\u8bf4\u4e00\u4e9b\u7ec6\u8282\u5427 \u6bcf\u6b21\u8bfb\u5b8c\u4e00\u4e2a\u56fe\u7247\u4e4b\u540e\u901a\u8fc7 if len(buf) != 4: break \u6765\u5224\u65ad\u6587\u4ef6\u662f\u4e0d\u662f\u8bfb\u5b8c\u4e86 \u4e2d\u6587\u7f16\u7801\u662fgb2312\u683c\u5f0f\u7684 \u8bfb\u5165\u6587\u4ef6\u7684\u65f6\u5019\u7528np.frombuffer\u4f1a\u5feb\u4e00\u70b9\uff0c\u5c3d\u91cf\u4e0d\u8981\u4e00\u4e2a\u4e00\u4e2a\u50cf\u7d20\u7684\u8bfb\uff0cpy\u7684\u901f\u5ea6\u592a\u62c9\u80ef\u4e86 dtype=np.uint8 \u53ef\u4ee5\u6781\u9650\u7701\u5185\u5b58 \u7b2c\u4e09\u6b65 \u770b\u770b\u56fe\u7247\u957f\u5565\u6837 import matplotlib.pyplot as plt features, labels = load_raw_data(1001) plt.imshow(features[0]) \u540c\u6837\u4e5f\u53ef\u4ee5\u8f93\u51fa\u56fe\u7247\u7684\u5927\u5c0f print(features[0].shape) \u5982\u679c\u4f60\u591a\u770b\u51e0\u5f20\u56fe\u7247\u7684\u8bdd\u5c31\u4f1a\u53d1\u73b0\uff0c\u57fa\u672c\u4e0a\u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u8fd9\u663e\u7136(\u663e\u7136\u5417\uff1f)\u4e0d\u80fd\u76f4\u63a5\u7528\uff0c\u6211\u4eec\u9700\u8981\u5148\u628a\u56fe\u7247\u90fd\u8f6c\u6362\u6210\u4e00\u6837\u7684\u5927\u5c0f \u7b2c\u56db\u6b65 \u56fe\u7247\u5904\u7406 \u4ee5\u5c06\u56fe\u7247\u6700\u7ec8\u8f6c\u6362\u621032*32\u4e3a\u4f8b \u5077\u5de5\u51cf\u6599\u7684\u65b9\u6cd5 pyTorch \u6709\u4e2a\u53eb\u505aAdaptiveAvgPool2d\u7684\u4e1c\u897f \u5bfc\u5165pytorch\u7684\u76f8\u5173\u4e1c\u897f import torch.nn as nn import torch ft = nn.AdaptiveAvgPool2d((32, 32)) \u4e3a\u4e86\u4f7f\u7528pytorch\u5c31\u5fc5\u987b\u628a\u539f\u6765\u56fe\u7247\u7684numpy\u5f62\u5f0f\u8f6c\u6362\u6210pytorch\u4f7f\u7528\u7684Tensor\u5f62\u5f0f \u8fd8\u8981\u6ce8\u610f\u628a\u6570\u636e\u683c\u5f0f\u6539\u6210float\u683c\u5f0f\u624d\u80fd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5230\u7f51\u7edc\u91cc \u6700\u540e\u8fd8\u8981\u6ce8\u610f\u6dfb\u52a0\u4e00\u7ef4\u4f5c\u4e3a\u901a\u9053\u7ef4 \u53cd\u6b63\u633a\u70e6\u7684 img = torch.from_numpy(features[0]) img = torch.from_numpy(features[0]).float().view(1, features[0].shape[0], features[0].shape[1]) new_img = ft(img) \u53ef\u4ee5\u518d\u8f93\u51fa\u4e00\u4e0bimg\u7684\u5927\u5c0f print(img.shape) \u53ef\u4ee5\u53d1\u73b0\u53d8\u6210\u4e86(1, 32, 32)\uff0c\u7b2c\u4e00\u4e2a1\u662f\u6307\u4e00\u4e2a\u901a\u9053\uff0c\u4e0d\u4e86\u89e3\u4e5f\u6ca1\u5173\u7cfb( \u628a\u56fe\u7247plot\u51fa\u6765\u770b\u770b plt.imshow(new_img[0]) \u867d\u7136\u5927\u5c0f\u5bf9\u4e86\uff0c\u4f46\u662f\u56fe\u50cf\u5b8c\u5168\u8d70\u6837\u4e86... \u624b\u5de5\u7f29\u653e\u56fe\u50cf \u6ca1\u60f3\u5230\u597d\u7684\u529e\u6cd5\uff0c\u53ea\u80fd\u624b\u52a8\u7f29\u653e\u4e86\uff0c\u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86PIL\u7684Image\u6a21\u5757 from PIL import Image \u5e78\u8fd0\u7684\u662f\uff0cImage\u53ef\u4ee5\u901a\u8fc7numpy\u7684ndarray\u76f4\u63a5\u751f\u6210\u7070\u5ea6\u56fe img = Image.fromarray(features[0]) \u5047\u8bbe\u6211\u4eec\u60f3\u628a\u56fe\u7247\u8f6c\u6362\u6210\u9ad8h\u5bbdw\uff08\u5047\u8bbe\u56fe\u7247\u7684\u539f\u6765\u5927\u5c0f\u4e3a\u9ad8x\u5bbdy\uff09 \u4e0d\u59a8\u5047\u8bbeh=w=0\u597d\u4e86~~\u597d\u840c\u554a~~ \u6211\u4eec\u5c31\u80fd\u5f97\u5230\u56fe\u7247\u7684\u7f29\u653e\u6bd4\u4f8b h,w = 32,32 x,y = features[0].shape ratio = min(h/x, w/y) \u7136\u540e\u901a\u8fc7PIL\u6765\u8fdb\u884c\u56fe\u7247\u7684\u7f29\u653e x,y = int(ratio*x), int(ratio*y) img = img.resize((y,x), Image.ANTIALIAS) resize\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6307\u8981\u53d8\u6362\u540e\u7684\u5927\u5c0f, \u8fd9\u91cc\u6709\u4e2a\u5751\u70b9\uff0c\u6392\u5728\u524d\u9762\u7684\u662fwidth \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6307\u63d2\u503c\u65b9\u6cd5 \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u5230\u5e95\u505a\u7684\u5bf9\u4e0d\u5bf9\u53ef\u4ee5\u901a\u8fc7 print(img.size) # \u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f img.show() # \u5eb7\u5eb7\u56fe\u7247\u957f\u5565\u6837 \u6700\u540e\u6211\u4eec\u8981\u628a\u56fe\u7247\u8865\u6210\u9ad8h\u5bbdw\uff08\u4e3a\u4ec0\u4e48\u8fd8\u8981\u8865\u539f\u56e0\u81ea\u5df1\u60f3\u53bb \u6ca1\u6709\u592a\u597d\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u91c7\u7528\u4e00\u79cd\u5947\u6280\u6deb\u5de7 \u5148\u521b\u5efa\u4e00\u5f20\u7a7a\u56fe new_img = Image.new('L',(w, h), 255) 'L'\u4ee3\u8868\u4e3a\u7070\u5ea6\u56fe\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f9d\u65e7\u662f width\u5728\u524d\u9762 \uff0c255\u8868\u793a\u6bcf\u4e2a\u50cf\u7d20\u70b9\u90fd\u662f255\u5373\u767d\u8272 \u7136\u540e\u6211\u4eec\u628a\u4e4b\u524dresize\u7684\u56fe\u7247\u7c98\u5230\u8fd9\u5f20\u7a7a\u56fe\u7684\u4e2d\u95f4 x,y = int((h-x)/2), int((w-y)/2) new_img.paste(img, (y, x)) paste\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793aimg\u7684\u5de6\u4e0a\u89d2\u5904\u4e8e\u54ea\u4e2a\u4f4d\u7f6e\uff0c width\u5728\u524d \u6700\u540e\u53ea\u9700\u8981\u4eceImage\u8f6c\u4f1andarray\u5c31\u597d\u4e86 arr = np.asarray(new_img) plt.imshow(arr) \u53d1\u73b0\u6548\u679c\u597d\u591a\u4e86 \u4e00\u4e9b\u8865\u5145 \u5728\u7f29\u653e\u56fe\u7247\u7684\u65f6\u5019\u53ef\u4ee5\u5f15\u5165\u4e00\u4e9b\u968f\u673a\u56e0\u7d20\uff0c\u6765\u63d0\u9ad8\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b \u6bd4\u5982, \u8ba9\u56fe\u7247\u4e0d\u4e00\u5b9a\u88ab\u653e\u7f29\u5230\u6700\u5927 h,w = 32,32 x,y = features[0].shape ratio = min((h-np.random.randint(3,5))/x, (w-np.random.randint(3,5))/y)","title":"\u4ece\u96f6\u5f00\u59cb\u7684\u89e3\u6790HWDB1.1\u6570\u636e\u4e4b\u8def"},{"location":"%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%A7%A3%E6%9E%90HWDB1.1%E6%95%B0%E6%8D%AE%E4%B9%8B%E8%B7%AF/#_1","text":"~~\u4e0d\u8bf4\u4e86~~","title":"\u7b2c\u4e00\u6b65 \u5f97\u5230\u6570\u636e\u96c6"},{"location":"%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%A7%A3%E6%9E%90HWDB1.1%E6%95%B0%E6%8D%AE%E4%B9%8B%E8%B7%AF/#_2","text":"\u5c31\u6765\u89e3\u6790\u8fd9\u4e2a\u53eb\u201c1001-c.gnt\u201d\u7684\u6587\u4ef6\u5427 \u5b98\u7f51\u4e0a\u6709\u5177\u4f53\u7684\u6587\u4ef6\u683c\u5f0f \u7b80\u5355\u6765\u8bf4\u662f\uff0c\u4e00\u4e2a\u8fd9\u6837\u7684\u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u591a\u4e2a\u56fe\u7247 ~~\u76f4\u63a5\u4e0a\u4ee3\u7801\u597d\u4e86~~ import numpy as np import struct def load_raw_data(id): path = '../HWDB1.1trn_gnt/' + str(id) + '-c.gnt' file = open(path, 'rb') features = [] labels = [] while file.read(1) != '': file.seek(-1, 1) buf = file.read(4) if len(buf) != 4: break length_bytes = struct.unpack('<I', buf)[0] tag_code = file.read(2) width = struct.unpack('<H', file.read(2))[0] height = struct.unpack('<H', file.read(2))[0] content = file.read(height*width) img = np.frombuffer(content, dtype=np.uint8).reshape(height,width) features.append(img) labels.append(char_dict[tag_code.decode('gb2312')]) return np.array(features), np.array(labels) char_dict\u5c31\u4e0d\u653e\u5728\u8fd9\u91cc\u4e86\uff0c\u592a\u957f\u4e86 \u8fd9\u4e2a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c\u662f\u4e00\u4e2andarray\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u7070\u5ea6\u56fe\u7247 \u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u662flabels\u6570\u7ec4\u4ee3\u8868\u4e86\u6bcf\u4e2a\u56fe\u7247\u5206\u522b\u5c5e\u7684\u7c7b\u522b \u7136\u540e\u968f\u4fbf\u8bf4\u4e00\u4e9b\u7ec6\u8282\u5427 \u6bcf\u6b21\u8bfb\u5b8c\u4e00\u4e2a\u56fe\u7247\u4e4b\u540e\u901a\u8fc7 if len(buf) != 4: break \u6765\u5224\u65ad\u6587\u4ef6\u662f\u4e0d\u662f\u8bfb\u5b8c\u4e86 \u4e2d\u6587\u7f16\u7801\u662fgb2312\u683c\u5f0f\u7684 \u8bfb\u5165\u6587\u4ef6\u7684\u65f6\u5019\u7528np.frombuffer\u4f1a\u5feb\u4e00\u70b9\uff0c\u5c3d\u91cf\u4e0d\u8981\u4e00\u4e2a\u4e00\u4e2a\u50cf\u7d20\u7684\u8bfb\uff0cpy\u7684\u901f\u5ea6\u592a\u62c9\u80ef\u4e86 dtype=np.uint8 \u53ef\u4ee5\u6781\u9650\u7701\u5185\u5b58","title":"\u7b2c\u4e8c\u6b65 \u89e3\u6790\u4e00\u4e2a\u6587\u4ef6"},{"location":"%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%A7%A3%E6%9E%90HWDB1.1%E6%95%B0%E6%8D%AE%E4%B9%8B%E8%B7%AF/#_3","text":"import matplotlib.pyplot as plt features, labels = load_raw_data(1001) plt.imshow(features[0]) \u540c\u6837\u4e5f\u53ef\u4ee5\u8f93\u51fa\u56fe\u7247\u7684\u5927\u5c0f print(features[0].shape) \u5982\u679c\u4f60\u591a\u770b\u51e0\u5f20\u56fe\u7247\u7684\u8bdd\u5c31\u4f1a\u53d1\u73b0\uff0c\u57fa\u672c\u4e0a\u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u8fd9\u663e\u7136(\u663e\u7136\u5417\uff1f)\u4e0d\u80fd\u76f4\u63a5\u7528\uff0c\u6211\u4eec\u9700\u8981\u5148\u628a\u56fe\u7247\u90fd\u8f6c\u6362\u6210\u4e00\u6837\u7684\u5927\u5c0f","title":"\u7b2c\u4e09\u6b65 \u770b\u770b\u56fe\u7247\u957f\u5565\u6837"},{"location":"%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%A7%A3%E6%9E%90HWDB1.1%E6%95%B0%E6%8D%AE%E4%B9%8B%E8%B7%AF/#_4","text":"\u4ee5\u5c06\u56fe\u7247\u6700\u7ec8\u8f6c\u6362\u621032*32\u4e3a\u4f8b","title":"\u7b2c\u56db\u6b65 \u56fe\u7247\u5904\u7406"},{"location":"%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%A7%A3%E6%9E%90HWDB1.1%E6%95%B0%E6%8D%AE%E4%B9%8B%E8%B7%AF/#_5","text":"pyTorch \u6709\u4e2a\u53eb\u505aAdaptiveAvgPool2d\u7684\u4e1c\u897f \u5bfc\u5165pytorch\u7684\u76f8\u5173\u4e1c\u897f import torch.nn as nn import torch ft = nn.AdaptiveAvgPool2d((32, 32)) \u4e3a\u4e86\u4f7f\u7528pytorch\u5c31\u5fc5\u987b\u628a\u539f\u6765\u56fe\u7247\u7684numpy\u5f62\u5f0f\u8f6c\u6362\u6210pytorch\u4f7f\u7528\u7684Tensor\u5f62\u5f0f \u8fd8\u8981\u6ce8\u610f\u628a\u6570\u636e\u683c\u5f0f\u6539\u6210float\u683c\u5f0f\u624d\u80fd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5230\u7f51\u7edc\u91cc \u6700\u540e\u8fd8\u8981\u6ce8\u610f\u6dfb\u52a0\u4e00\u7ef4\u4f5c\u4e3a\u901a\u9053\u7ef4 \u53cd\u6b63\u633a\u70e6\u7684 img = torch.from_numpy(features[0]) img = torch.from_numpy(features[0]).float().view(1, features[0].shape[0], features[0].shape[1]) new_img = ft(img) \u53ef\u4ee5\u518d\u8f93\u51fa\u4e00\u4e0bimg\u7684\u5927\u5c0f print(img.shape) \u53ef\u4ee5\u53d1\u73b0\u53d8\u6210\u4e86(1, 32, 32)\uff0c\u7b2c\u4e00\u4e2a1\u662f\u6307\u4e00\u4e2a\u901a\u9053\uff0c\u4e0d\u4e86\u89e3\u4e5f\u6ca1\u5173\u7cfb( \u628a\u56fe\u7247plot\u51fa\u6765\u770b\u770b plt.imshow(new_img[0]) \u867d\u7136\u5927\u5c0f\u5bf9\u4e86\uff0c\u4f46\u662f\u56fe\u50cf\u5b8c\u5168\u8d70\u6837\u4e86...","title":"\u5077\u5de5\u51cf\u6599\u7684\u65b9\u6cd5"},{"location":"%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%A7%A3%E6%9E%90HWDB1.1%E6%95%B0%E6%8D%AE%E4%B9%8B%E8%B7%AF/#_6","text":"\u6ca1\u60f3\u5230\u597d\u7684\u529e\u6cd5\uff0c\u53ea\u80fd\u624b\u52a8\u7f29\u653e\u4e86\uff0c\u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86PIL\u7684Image\u6a21\u5757 from PIL import Image \u5e78\u8fd0\u7684\u662f\uff0cImage\u53ef\u4ee5\u901a\u8fc7numpy\u7684ndarray\u76f4\u63a5\u751f\u6210\u7070\u5ea6\u56fe img = Image.fromarray(features[0]) \u5047\u8bbe\u6211\u4eec\u60f3\u628a\u56fe\u7247\u8f6c\u6362\u6210\u9ad8h\u5bbdw\uff08\u5047\u8bbe\u56fe\u7247\u7684\u539f\u6765\u5927\u5c0f\u4e3a\u9ad8x\u5bbdy\uff09 \u4e0d\u59a8\u5047\u8bbeh=w=0\u597d\u4e86~~\u597d\u840c\u554a~~ \u6211\u4eec\u5c31\u80fd\u5f97\u5230\u56fe\u7247\u7684\u7f29\u653e\u6bd4\u4f8b h,w = 32,32 x,y = features[0].shape ratio = min(h/x, w/y) \u7136\u540e\u901a\u8fc7PIL\u6765\u8fdb\u884c\u56fe\u7247\u7684\u7f29\u653e x,y = int(ratio*x), int(ratio*y) img = img.resize((y,x), Image.ANTIALIAS) resize\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6307\u8981\u53d8\u6362\u540e\u7684\u5927\u5c0f, \u8fd9\u91cc\u6709\u4e2a\u5751\u70b9\uff0c\u6392\u5728\u524d\u9762\u7684\u662fwidth \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6307\u63d2\u503c\u65b9\u6cd5 \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u5230\u5e95\u505a\u7684\u5bf9\u4e0d\u5bf9\u53ef\u4ee5\u901a\u8fc7 print(img.size) # \u67e5\u770b\u56fe\u7247\u7684\u5927\u5c0f img.show() # \u5eb7\u5eb7\u56fe\u7247\u957f\u5565\u6837 \u6700\u540e\u6211\u4eec\u8981\u628a\u56fe\u7247\u8865\u6210\u9ad8h\u5bbdw\uff08\u4e3a\u4ec0\u4e48\u8fd8\u8981\u8865\u539f\u56e0\u81ea\u5df1\u60f3\u53bb \u6ca1\u6709\u592a\u597d\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u91c7\u7528\u4e00\u79cd\u5947\u6280\u6deb\u5de7 \u5148\u521b\u5efa\u4e00\u5f20\u7a7a\u56fe new_img = Image.new('L',(w, h), 255) 'L'\u4ee3\u8868\u4e3a\u7070\u5ea6\u56fe\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f9d\u65e7\u662f width\u5728\u524d\u9762 \uff0c255\u8868\u793a\u6bcf\u4e2a\u50cf\u7d20\u70b9\u90fd\u662f255\u5373\u767d\u8272 \u7136\u540e\u6211\u4eec\u628a\u4e4b\u524dresize\u7684\u56fe\u7247\u7c98\u5230\u8fd9\u5f20\u7a7a\u56fe\u7684\u4e2d\u95f4 x,y = int((h-x)/2), int((w-y)/2) new_img.paste(img, (y, x)) paste\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793aimg\u7684\u5de6\u4e0a\u89d2\u5904\u4e8e\u54ea\u4e2a\u4f4d\u7f6e\uff0c width\u5728\u524d \u6700\u540e\u53ea\u9700\u8981\u4eceImage\u8f6c\u4f1andarray\u5c31\u597d\u4e86 arr = np.asarray(new_img) plt.imshow(arr) \u53d1\u73b0\u6548\u679c\u597d\u591a\u4e86","title":"\u624b\u5de5\u7f29\u653e\u56fe\u50cf"},{"location":"%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%A7%A3%E6%9E%90HWDB1.1%E6%95%B0%E6%8D%AE%E4%B9%8B%E8%B7%AF/#_7","text":"\u5728\u7f29\u653e\u56fe\u7247\u7684\u65f6\u5019\u53ef\u4ee5\u5f15\u5165\u4e00\u4e9b\u968f\u673a\u56e0\u7d20\uff0c\u6765\u63d0\u9ad8\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b \u6bd4\u5982, \u8ba9\u56fe\u7247\u4e0d\u4e00\u5b9a\u88ab\u653e\u7f29\u5230\u6700\u5927 h,w = 32,32 x,y = features[0].shape ratio = min((h-np.random.randint(3,5))/x, (w-np.random.randint(3,5))/y)","title":"\u4e00\u4e9b\u8865\u5145"}]}